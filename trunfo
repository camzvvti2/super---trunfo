#include <stdio.h>

#define TAMANHO_TABULEIRO 10

int main() {
    int tabuleiro[TAMANHO_TABULEIRO] = {0}; // 0 = vazio, 1 = navio
    int posicao;

    printf("Digite a posição do navio (0 a %d): ", TAMANHO_TABULEIRO - 1);
    scanf("%d", &posicao);

    if (posicao >= 0 && posicao < TAMANHO_TABULEIRO) {
        tabuleiro[posicao] = 1;
        printf("Navio colocado na posição %d\n", posicao);
    } else {
        printf("Posição inválida!\n");
    }

    printf("Estado atual do tabuleiro:\n");
    for (int i = 0; i < TAMANHO_TABULEIRO; i++) {
        printf("%d ", tabuleiro[i]);
    }
    printf("\n");

    return 0;
}
#include <stdio.h>

#define TAM 10

void imprimir_tabuleiro(int tab[TAM][TAM]) {
    for (int i = 0; i < TAM; i++) {
        for (int j = 0; j < TAM; j++) {
            printf("%d ", tab[i][j]);
        }
        printf("\n");
    }
}

int main() {
    int tabuleiro[TAM][TAM] = {0};
    int linha, coluna, tamanho_navio;
    char direcao;

    printf("Digite linha e coluna inicial do navio (0-9): ");
    scanf("%d %d", &linha, &coluna);
    printf("Tamanho do navio: ");
    scanf("%d", &tamanho_navio);
    printf("Direção (H=Horizontal, V=Vertical, D=Diagonal): ");
    scanf(" %c", &direcao);

    for (int i = 0; i < tamanho_navio; i++) {
        if (direcao == 'H' && coluna + i < TAM)
            tabuleiro[linha][coluna + i] = 1;
        else if (direcao == 'V' && linha + i < TAM)
            tabuleiro[linha + i][coluna] = 1;
        else if (direcao == 'D' && linha + i < TAM && coluna + i < TAM)
            tabuleiro[linha + i][coluna + i] = 1;
    }

    imprimir_tabuleiro(tabuleiro);
    return 0;
}

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define TAM 10

void imprimir_tabuleiro(int tab[TAM][TAM]) {
    for (int i = 0; i < TAM; i++) {
        for (int j = 0; j < TAM; j++) {
            printf("%d ", tab[i][j]);
        }
        printf("\n");
    }
}

void habilidade_cruz(int tab[TAM][TAM], int x, int y) {
    for (int i = 0; i < TAM; i++) {
        tab[i][y] = 2;
        tab[x][i] = 2;
    }
}

void habilidade_cone(int tab[TAM][TAM], int x, int y) {
    for (int i = 0; i <= 2; i++) {
        for (int j = -i; j <= i; j++) {
            int linha = x + i;
            int coluna = y + j;
            if (linha >= 0 && linha < TAM && coluna >= 0 && coluna < TAM) {
                tab[linha][coluna] = 3;
            }
        }
    }
}

void habilidade_octaedro(int tab[TAM][TAM], int x, int y) {
    for (int i = -2; i <= 2; i++) {
        for (int j = -2; j <= 2; j++) {
            if (abs(i) + abs(j) <= 2) {
                int linha = x + i;
                int coluna = y + j;
                if (linha >= 0 && linha < TAM && coluna >= 0 && coluna < TAM) {
                    tab[linha][coluna] = 4;
                }
            }
        }
    }
}

int main() {
    int tabuleiro[TAM][TAM] = {0};
    int x, y;
    char habilidade;

    printf("Digite a posição central (x y): ");
    scanf("%d %d", &x, &y);

    printf("Escolha a habilidade (C = Cruz, O = Octaedro, N = Cone): ");
    scanf(" %c", &habilidade);

    switch (habilidade) {
        case 'C': habilidade_cruz(tabuleiro, x, y); break;
        case 'N': habilidade_cone(tabuleiro, x, y); break;
        case 'O': habilidade_octaedro(tabuleiro, x, y); break;
        default: printf("Habilidade inválida!\n"); return 1;
    }

    imprimir_tabuleiro(tabuleiro);
    return 0;
}
